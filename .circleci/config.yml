# Golang CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-go/ for more details
version: 2
jobs:
  application-build:
    working_directory: /go/src/github.com/servian/TechChallengeApp
    docker:
      - image: circleci/golang:latest
    resource_class: medium

    steps:
      - checkout

      # build and test
      - run: go get -v -t -d ./...
      - run: go build -v
      - run: go test -v -race -cover ./...

  application-deploy:
    machine: true
    resource_class: medium
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install Az-Cli
          command: |
            sudo apt-get update
            sudo apt-get install ca-certificates curl apt-transport-https lsb-release gnupg
            curl -sL https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/microsoft.gpg > /dev/null
            AZ_REPO=$(lsb_release -cs) && echo "deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ $AZ_REPO main" | sudo tee /etc/apt/sources.list.d/azure-cli.list
            sudo apt-get update && sudo apt-get install azure-cli

      - run:
          name: Install Kubectl
          command: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
            kubectl version --client

      - run:
          name: Deploy application to AKS
          command: |
            ls -l
            az login --service-principal --tenant $AZURE_SP_TENANT -u $AZURE_SP -p "$AZURE_SP_PASSWORD"
            az account set --subscription $ARM_SUBSCRIPTION_ID
            az aks get-credentials --name $AZURE_AKS_NAME --resource-group $AZURE_RG_NAME
            cd terraform
            kubectl apply -f servian-dp.yaml
            kubectl apply -f servian-sv.yaml
            kubectl apply -f servian-ing.yaml
            
      - persist_to_workspace:
          root: .
          paths:
            - .
  application-create-image:   
    machine: true
    resource_class: medium
    steps:
      - checkout

      - run:
          name: Build Image
          command: |
            docker build . -t $(echo $DOCKER_REPO)/techchallengeapp:latest

      - run:
          name: Push Image
          command: |
            echo "$DOCKER_PASS" | docker login $DOCKER_REPO --username $DOCKER_USER --password-stdin
            docker push $(echo $DOCKER_REPO)/techchallengeapp:latest

      - persist_to_workspace:
          root: .
          paths:
            - .

  terraform-plan-apply:
    working_directory: /tmp/project
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - checkout
      - run:
          name: terraform init & plan
          command: |
            cd terraform
            terraform init -input=false
            terraform plan -out tfapply -var-file variables.tfvars
      - persist_to_workspace:
          root: .
          paths:
            - .

  terraform-apply:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: .
      - run:
          name: terraform
          command: |
            cd terraform
            terraform apply -auto-approve tfapply
            cp ../k8s/*.yaml .
            sed -i 's/<dbuser>/'"$(terraform output --raw pgsql_administrator_login)"'/g' servian-dp.yaml
            sed -i 's/<dbpass>/'"$(terraform output --raw pgsql_administrator_login_password)"'/g' servian-dp.yaml
            sed -i 's/<dbhost>/'"$(terraform output --raw pgsql_name)"'.postgres.database.azure.com/g' servian-dp.yaml
            sed -i 's/<reponame>/'"$DOCKER_REPO"'/g' servian-dp.yaml
            cat servian-dp.yaml
      - persist_to_workspace:
          root: .
          paths:
            - .

  terraform-plan-destroy:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: .
      - run:
          name: terraform create destroy plan
          command: |
            cd terraform
            terraform plan -destroy -out tfdestroy -var-file variables.tfvars
      - persist_to_workspace:
          root: .
          paths:
            - .

  terraform-destroy:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: .
      - run:
          name: terraform destroy
          command: |
            cd terraform
            terraform apply -auto-approve tfdestroy

workflows:
  version: 2
  build_test_deploy:
    jobs:
      - application-build
      - terraform-plan-apply:
          requires:
            - application-build
          context:
            - Servian
      - terraform-hold-apply:
          type: approval
          requires:
            - terraform-plan-apply
      - terraform-apply:
          requires:
            - terraform-hold-apply
          context:
            - Servian
      - application-create-image:
          requires: 
            - terraform-apply
          filters:
            branches:
              only: master
            tags:
              ignore: /.*/
          context:
            - Servian
      - application-deploy:
          requires: 
            - application-create-image
          context:
            - Servian
          filters:
            branches:
              only: master
            tags:
              ignore: /.*/
      - terraform-plan-destroy:
          requires:
            - application-deploy
          context:
            - Servian
      - terraform-hold-destroy:
          type: approval
          requires:
            - terraform-plan-destroy
      - terraform-destroy:
          requires:
            - terraform-hold-destroy
          context:
            - Servian