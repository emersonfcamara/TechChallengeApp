# Golang CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-go/ for more details
version: 2.1
orbs:
  azure-cli: circleci/azure-cli@1.0.0
jobs:
  build:
    working_directory: /go/src/github.com/servian/TechChallengeApp
    docker:
      - image: circleci/golang:latest
    resource_class: medium

    steps:
      - checkout

      # build and test
      - run: go get -v -t -d ./...
      - run: go build -v
      - run: go test -v -race -cover ./...

  deploy:   
    executor: azure-cli/azure-docker
    steps:
      - azure-cli/login-with-service-principal
      - run:
          command: |
            ls -l
            az aks get-credentials --name $AZURE_AKS_NAME --resource-group $AZURE_RG_NAME
            cd k8s
            kubectl apply servian-dp.yaml

          name: List resources of tenant stored as `AZURE_SP_TENANT` env var
      - persist_to_workspace:
          root: .
          paths:
            - .
  create-image:   
    machine: true
    resource_class: medium
    steps:
      - checkout

      - run:
          name: Build Image
          command: |
            docker build . -t acrservian.azurecr.io/techchallengeapp:latest

      - run:
          name: Push Image
          command: |
            echo "$DOCKER_PASS" | docker login $DOCKER_REPO --username $DOCKER_USER --password-stdin
            docker push $DOCKER_REPO/techchallengeapp:latest

  plan-apply:
    working_directory: /tmp/project
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - checkout
      - run:
          name: terraform init & plan
          command: |
            cd terraform
            terraform init -input=false
            terraform plan -out tfapply -var-file variables.tfvars
      - persist_to_workspace:
          root: .
          paths:
            - .

  apply:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: .
      - run:
          name: terraform
          command: |
            cd terraform
            terraform apply -auto-approve tfapply
            terraform output pgsql_administrator_login
            terraform output pgsql_administrator_login_password
            terraform output pgsql_name
            terraform output pgsql_location
            # sed -i 's/<dbuser>/'"$(terraform output pgsql_administrator_login)"'/g' servian-dp.yaml
            # sed -i 's/<dbpass>/'"$(terraform output pgsql_administrator_login_password)"'/g' servian-dp.yaml
            # sed -i 's/<dbhost>/'"$(terraform output pgsql_name)"'.postgres.database.azure.com/g' servian-dp.yaml
            # sed -i 's/<listenhost>/'"$(terraform output pgsql_location)"'/g' servian-dp.yaml
            cd ../k8s
            cat servian-dp.yaml
      - persist_to_workspace:
          root: .
          paths:
            - .

  plan-destroy:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: .
      - run:
          name: terraform create destroy plan
          command: |
            cd terraform
            terraform plan -destroy -out tfdestroy -var-file variables.tfvars
      - persist_to_workspace:
          root: .
          paths:
            - .

  destroy:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: .
      - run:
          name: terraform destroy
          command: |
            cd terraform
            terraform apply -auto-approve tfdestroy

workflows:
  version: 2
  build_test_deploy:
    jobs:
      - build
      - create-image:
          requires: 
            - plan-apply
          filters:
            branches:
              only: master
            tags:
              ignore: /.*/
          context:
            - Servian
      - deploy:
          requires: 
            - apply
          context:
            - Servian
          filters:
            branches:
              only: master
            tags:
              ignore: /.*/
      - plan-apply:
          requires:
            - build
          context:
            - Servian
      - hold-apply:
          type: approval
          requires:
            - plan-apply
      - apply:
          requires:
            - hold-apply
          context:
            - Servian
      - plan-destroy:
          requires:
            - deploy
          context:
            - Servian
      - hold-destroy:
          type: approval
          requires:
            - plan-destroy
      - destroy:
          requires:
            - hold-destroy
          context:
            - Servian